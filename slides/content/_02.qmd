---
title: "444 Lecture 2"
subtitle: "Introducing Games"
date: "January 10, 2023"
---

```{r, include=FALSE}
source("kableformat.R")
```

# Utility

## Game Outcomes

There are two natural ways to specify the outcome of a game.

> 1.  Describe the physical situation that results.
> 2.  Describe how much **utility** each player gets from that result.

## Utility

-   We are usually going to be focused on the second.
-   That's because we want to know what makes sense from the players' perspectives.
-   And just knowing the physical outcomes doesn't tell us that.

## What is Utility

-   It's not score.
-   The players are aiming to maximise their own number, not maximise the difference between the numbers.

------------------------------------------------------------------------

![A memorable scoreboard](images/raith.jpg){height="65%" width="65%"}

## What is Utility

-   The players would prefer a 3-4 result (i.e., 3 for them, 4 for other player) to a 2-1 result.
-   So this is very much unlike soccer, even though the numbers will often feel a lot like soccer scores.

## What is Utility

-   It's not money, for two distinct reasons.
-   First, the players might care how much money the other players get.

## Utility and Altruism

Consider these three situations

::: {.nonincremental}
1.  Billy gets \$90, Suzy gets \$100.
2.  Billy gets \$100, Suzy gets nothing.
3.  Billy gets \$110, Suzy gets \$100.
:::

How do you order these in terms of utility to Billy, from highest to lowest?

## Utility and Altruism

-   We don't know given just this description.
-   If Billy wants Suzy to get money, he might prefer option 1 to option 2.
-   If Billy wants Suzy to not have money, he might prefer option 2 to option 3.

## What is Utility

-   It's not money, for two distinct reasons.
-   Second, getting twice as much money typically doesn't produce twice as much utility.

## What is Utility

It is, more or less, desirability.

-   Outcome $O_1$ has more utility for player $X$ than outcome $O_2$ iff $X$ prefers to be in $O_1$ than $O_2$.

## Utility and Numbers

-   Now you might have noticed something odd there.
-   We are trying to define this numerical quantity, but we've just told you something about when it is bigger or smaller.
-   Surely we need to say something more, like how much bigger or smaller it is in different situations.

# Ordinal and Cardinal Utility

## Utility

A utility function (for a particular agent) is a mapping $U$ from situations to numbers satsifying this constraint.

-   $U(S_1) > U(S_2)$ iff the agent is better off in $S_1$ than in $S_2$.

## Welfare

This isn't part of the formal theory, but we usually implicitly assume (at least in our narratives), the following principle.

> The agent is better off in $S_1$ than in $S_2$ iff, given a choice and assuming they are fully informed, they prefer being in $S_1$ to $S_2$.

That is, we'll usually speak as if a radically subjectivist view of welfare is correct. I've been doing this already, and I'm going to keep doing it.

## Ordinal Utility

-   When we say that we're working with **ordinal** utility functions, really the only principle that applies is the one from two slides back.
-   Higher utilities are better, i.e., are preferred.
-   The term **ordinal** should make you think of 'orders'; all an ordinal utility function does is provide a rank **ordering** of the outcomes.

## Two Functions

So if we're working in ordinal utility, these two functions describe the same underlying reality.

|       | $U_1$ | $U_2$ |
|-------|:-----:|:-----:|
| $O_1$ |   1   |   1   |
| $O_2$ |   2   |  10   |
| $O_3$ |   3   |  500  |
| $O_4$ |   4   | 7329  |

## Cardinal Utility

-   In cardinal utility theory, the differences between the numbers matter.
-   The numbers now express quantities, and the two functions from the previous slide do not represent the same underlying reality.

## Cardinal Utility (Detail)

-   There is a fussy point here that's worth going over.
-   Even cardinal utility functions don't come with a scale.
-   So two functions with different numbers in them can still express the same underlying reality.

## Cardinal Utility (Detail)

The standard way to put this is that (cardinal) utility is defined only up to a **positive, affine transformation**. That means that if $U_1$ and $U_2$ are related by the following formula, then they represent the same state of affairs.

$$
U_2(o) = aU_1(o) + b \text{ where } a > 0
$$

## Celsius and Farenheit

-   The main real world cases of scales that are related in this way are temperature scales.
-   To convert between Celsius and Farenheit you use the formula $F = 1.8C + 32$.
-   But the scales are just two ways of representing the same physical reality.

## Cardinal Utility (Detail)

-   So there is no such thing as one outcome being *twice as good* as another.
-   But we can say a lot of things about differences.

## Cardinal Utility (Detail)

-   If the difference between $O_1$ and $O_2$ is the same as the difference between $O_2$ and $O_3$, that will stay the same under any positive affine transformation.
-   Indeed, for any $k$, if the difference between $O_1$ and $O_2$ is $k$ times the difference between $O_2$ and $O_3$, that will stay the same under any positive affine transformation.

# Dominance Arguments

## A Simple Game

::: {.columns}
:::: {.column width="40%"}
```{r}
game <- tribble(
  ~Moves,     ~Left,     ~Right,
  "Up",      "4, 1", "2, 0",
  "Down",    "3, 0", "1, 1"
)
gameformat(game)
```
::::

:::: {.column width="60%"}
Here's how to read this table.

::::: {.nonincremental}
1. Two players, call them Row and Column.
2. Row chooses the row, Column chooses the column - between them they choose a cell.
3. Each cell has two numbers - the first is Row's payout, the second is Column's payout.
:::::

::::

:::
## Strong Dominance 

::: {.columns}
:::: {.column width="40%"}
```{r}
game <- tribble(
  ~Moves,     ~Left,     ~Right,
  "Up",      "4, 1", "2, 0",
  "Down",    "3, 0", "1, 1"
)
gameformat(game)
```
::::

:::: {.column width="60%"}
-   Whatever Column does, Row is better off playing Up rather than Down.
-   We say that Up **strongly dominates** Down.
::::

:::

## Strong Dominance {.fragile}

::: {.columns}
:::: {.column width="40%"}
```{r}
game <- tribble(
  ~Moves,     ~Left,     ~Right,
  "Up",      "4, 1", "2, 0",
  "Middle",  "5, 0", "0, 0",
  "Down",    "3, 0", "1, 1"
)
gameformat(game)
```
::::

:::: {.column width="60%"}
-   Adding options doesn't change things.
-   Up still dominates Down, even if it isn't always best.
::::

:::

## Strong Dominance {.fragile}

::: {.columns}
:::: {.column width="40%"}

```{r}
game <- tribble(
  ~Moves,     ~Left,     ~Right,
  "Up",      "3, 1", "0, 0",
  "Middle",  "2, 0", "2, 0",
  "Down",    "0, 0", "3, 1"
)
gameformat(game)
```
::::

:::: {.column width="60%"}
-   This is **not** a case of dominance.
-   Even though Middle is never the highest value, it isn't dominated by any one option.
::::

:::

## Strong Dominance

Strategy $S_1$ strongly dominates strategy $S_2$ if for any strategy $S$ by the other player(s), if $S$ is played, then $S_1$ returns a higher payoff than $S_2$.

## Weak Dominance

Strategy $S_1$ weakly dominates strategy $S_2$ if for any strategy $S$ by the other player(s), if $S$ is played, then $S_1$ returns a payoff that is at least as high $S_2$, and for some strategy by the other player(s), $S_1$ returns a higher payoff than $S_2$.

-   The difference is that weak dominance allows for **ties**.

## Two Dominance Notions

Strong Dominance

::: {.nonincremental}
-   Always better.
:::

Weak Dominance

::: {.nonincremental}
-   Never worse.
-   Sometimes better.
:::

## Weak Dominance {.fragile}

::: {.columns}
:::: {.column width="40%"}

```{r}
game <- tribble(
  ~Moves,     ~Left,     ~Right,
  "Up",      "4, 1", "2, 0",
  "Down",    "3, 0", "\\textbf{2}, 1"
)
gameformat(game)
```
::::

:::: {.column width="60%"}
::::: {.nonincremental}
-   I've changed the payoffs in the bottom right cell.
-   Now Up does not strongly dominate Down.
-   But it does weakly dominate Down.
:::::

::::

:::

# Some Famous Games

## Prisoners' Dilemma {.fragile}

```{r}
game <- tribble(
  ~Moves,       ~Coop, ~Defect,
  "Coop",      "3, 3", "0, 5",
  "Defect",    "5, 0", "1, 1"
)
gameformat(game)
```

## Generic Symmetric Game {.fragile}

```{r}
game <- tribble(
  ~Moves,       ~X, ~Y,
  "X",    "a, a", "b, c",
  "Y",    "c, b", "d, d"
)
gameformat(game)
```

## Prisoners' Dilemma {.fragile}

::: {.columns}
:::: {.column width="40%"}

```{r}
game <- tribble(
  ~Moves,       ~X, ~Y,
  "X",    "a, a", "b, c",
  "Y",    "c, b", "d, d"
)
gameformat(game)
```
::::

:::: {.column width="60%"}

Ordinal constraints

::::: {.nonincremental}
-   $c > a, d > b$
-   $a > d$
:::::

Cardinal constraints

::::: {.nonincremental}
-   $2a > b + c$
:::::

::::

:::

## Stag Hunt {.fragile}

```{r}
game <- tribble(
  ~Moves,       ~Coop, ~Defect,
  "Coop",      "5, 5", "0, 4",
  "Defect",    "4, 0", "2, 2"
)
gameformat(game)
```

## Stag Hunt {.fragile}

::: {.columns}
:::: {.column width="40%"}

```{r}
game <- tribble(
  ~Moves,       ~X, ~Y,
  "X",    "a, a", "b, c",
  "Y",    "c, b", "d, d"
)
gameformat(game)
```

::::

:::: {.column width="60%"}

Ordinal constraints

::::: {.nonincremental}
-   $a > c, d > b$
-   $a > d$
:::::

Cardinal constraints

::::: {.nonincremental}
-   $a + b < c + d$
:::::

::::

:::

## Battle of the Sexes {.fragile}

```{r}
game <- tribble(
  ~Moves,       ~Row, ~Col,
  "Row",    "4, 1", "0, 0",
  "Col",    "0, 0", "1, 4"
)
gameformat(game)
```

## Battle of the Sexes (relabelled) {.fragile}

```{r}
game <- tribble(
  ~Moves,       ~Self, ~Other,
  "Self",    "0, 0", "4, 1",
  "Other",    "1, 4", "0, 0"
)
gameformat(game)
```

## Chicken {.fragile}

```{r}
game <- tribble(
  ~Moves,       ~Attack, ~Retreat,
  "Attack",    "-99, -99", "2, 0",
  "Retreat",    "0, 2", "1, 1"
)
gameformat(game)
```

## Rock Paper Scissors {.fragile}

```{r}
game <- tribble(
  ~Moves,        ~Rock,   ~Paper, ~Scissors,
  "Rock",       "0, 0",  "-1, 1", "1, -1",
  "Paper",     "1, -1",   "0, 0", "-1, 1",
  "Scissors",  "-1, 1",  "1, -1", "0, 0"
  )
gameformat(game)
```

## For Next Time

We're jumping ahead to section 2.5 of Bonanno.
